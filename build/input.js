var InputController=function(a){this.deviceHandlers={};this.setupBindings(a)};
InputController.prototype={bindings:null,deviceHandlers:null,input:null,setupBindings:function(a){this.bindings={};this.input={};Object.keys(a).forEach(function(b){var c=a[b],d={}.toString;this.input[b]=0;if("[object Array]"==d.call(c))for(var d=0,f=c.length;d<f;d++)this._applyBinding(c[d],b);else this._applyBinding(c,b)},this)},updateBindings:function(a){this.setupBindings(a);Object.keys(this.deviceHandlers).forEach(function(a){this.deviceHandlers[a].bindings=this.bindings[a]||{};this.deviceHandlers[a].input=
this.input},this)},_applyBinding:function(a,b){this.bindings[a.device]||(this.bindings[a.device]={});this.bindings[a.device][a.inputId]={description:b,down:!!a.down,up:!!a.up,invert:!!a.invert}},registerDeviceHandler:function(a,b){this.deviceHandlers[b]=new a(this.bindings[b]||{},this.input)},destroy:function(){Object.keys(this.deviceHandlers).forEach(function(a){this.deviceHandlers[a].destroy()},this)},startDetecting:function(a){var b=function(b){b.timestamp=Date.now();a(b)};Object.keys(this.deviceHandlers).forEach(function(a){a=
this.deviceHandlers[a];a._detectCallback=b;a.isDetecting=!0},this)},stopDetecting:function(){Object.keys(this.deviceHandlers).forEach(function(a){a=this.deviceHandlers[a];a._detectCallback=null;a.isDetecting=!1},this)}};var KeyboardHandler=function(a,b){this.bindings=a;this.input=b;document.addEventListener("keyup",this.upListener=this.onKeyUp.bind(this),!1);document.addEventListener("keydown",this.downListener=this.onKeyDown.bind(this),!1)};
KeyboardHandler.prototype={isDetecting:!1,onKeyDown:function(a){this.isDetecting?this._detectCallback({device:"keyboard",inputId:a.keyCode,isAxis:!1}):a.keyCode in this.bindings&&(a=this.bindings[a.keyCode],a.down&&(this.input[a.description]=1))},onKeyUp:function(a){!this.isDetecting&&a.keyCode in this.bindings&&(a=this.bindings[a.keyCode],a.up&&(this.input[a.description]=0))},destroy:function(){document.removeEventListener("keyup",this.upListener,!1);document.removeEventListener("keydown",this.downListener,
!1)}};
var MouseHandler=function(a,b){this.bindings=a;this.input=b;this.input.mouseX=0;this.input.mouseY=0;document.addEventListener("mousemove",this.moveListener=this.onMouseMove.bind(this),!1);document.addEventListener("mousedown",this.downListener=this.onMouseDown.bind(this),!1);document.addEventListener("mouseup",this.upListener=this.onMouseUp.bind(this),!1);document.addEventListener("contextmenu",(this.ctxListener=function(a){a.preventDefault()}).bind(this),!1);window.addEventListener("resize",this.resizeListener=
this.onResize.bind(this),!1);this.onResize()};
MouseHandler.prototype={infiniteXAxis:!1,infiniteYAxis:!1,width:0,height:0,onMouseMove:function(a){var b,c,d;c=this.width;b=c/2;d=this.height;var f=d/2;document.pointerLockEnabled?(c=this.clamp(0,c,this.input.mouseX+a.movementX),d=this.clamp(0,d,this.input.mouseY+a.movementY)):(c=a.pageX,d=a.pageY);b=this.infiniteXAxis?document.pointerLockEnabled?a.movementX:c-this.input.mouseX:-(c-b)/b;a=this.infiniteYAxis?document.pointerLockEnabled?a.movementY:d-this.input.mouseY:-(d-f)/f;this.isDetecting?(a=Math.abs(this.input.mouseX-
c),c=Math.abs(this.input.mouseY-d),this._detectCallback({device:"mouse",inputId:a>c?"x":"y",isAxis:!0})):(this.input.mouseX=c,this.input.mouseY=d,"x"in this.bindings&&(c=this.bindings.x,this.input[c.description]=c.invert?-1*b:b),"y"in this.bindings&&(c=this.bindings.y,this.input[c.description]=c.invert?-1*a:a))},onMouseDown:function(a){this.isDetecting?this._detectCallback({device:"mouse",inputId:a.button,isAxis:!1}):a.button in this.bindings&&(a=this.bindings[a.button],a.down&&(this.input[a.description]=
1))},onMouseUp:function(a){!this.isDetecting&&a.button in this.bindings&&(a=this.bindings[a.button],a.up&&(this.input[a.description]=0))},onResize:function(){this.width=window.innerWidth;this.height=window.innerHeight},clamp:function(a,b,c){return Math.min(b,Math.max(a,c))},destroy:function(){document.removeEventListener("mousemove",this.moveListener,!1);document.removeEventListener("mousedown",this.downListener,!1);document.removeEventListener("mouseup",this.upListener,!1);document.removeEventListener("contextmenu",
this.ctxListener,!1);window.removeEventListener("resize",this.resizeListener,!1)}};var GamepadHandler=function(a,b){this.bindings=a;this.input=b;this.gamepads=[];this.prevRawGamepadTypes=[];this.prevTimestamps=[];this.buttonStates=[];this.axisValues=[];this.init()};
GamepadHandler.prototype={deadzone:0.01,buttonStates:null,axisValues:null,gamepads:null,isPolling:!1,prevRawGamepadTypes:null,prevTimestamps:null,init:function(){if(navigator.webkitGetGamepads||navigator.webkitGamepads||-1!=navigator.userAgent.indexOf("Firefox/"))window.addEventListener("MozGamepadConnected",this.connectListener=this.onGamepadConnect.bind(this),!1),window.addEventListener("MozGamepadDisconnected",this.disconnectListener=this.onGamepadDisconnect.bind(this),!1),(navigator.webkitGamepads||
navigator.webkitGetGamepads)&&this.startPolling()},onGamepadConnect:function(a){this.gamepads.push(a.gamepad);this.startPolling()},onGamepadDisconnect:function(a){for(var b=this.gamepads-1;0<=b;b--)if(this.gamepads[b].index==a.gamepad.index){this.gamepads.splice(b,1);break}0==this.gamepads.length&&this.stopPolling()},startPolling:function(){this.isPolling||(this.isPolling=!0,this.tick())},stopPolling:function(){this.isPolling=!1},tick:function(){if(this.isPolling){var a=this.tick.bind(this);window.requestAnimationFrame?
window.requestAnimationFrame(a):window.mozRequestAnimationFrame?window.mozRequestAnimationFrame(a):window.webkitRequestAnimationFrame&&window.webkitRequestAnimationFrame(a)}this.pollStatus()},pollStatus:function(){this.pollGamepads();for(var a=0,b=this.gamepads.length;a<b;a++){var c=this.gamepads[a];c.timestamp&&c.timestamp==this.prevTimestamps[a]||(this.prevTimestamps[a]=c.timestamp,this.onStatusChanged(a))}},pollGamepads:function(){var a=navigator.webkitGetGamepads&&navigator.webkitGetGamepads()||
navigator.webkitGamepads,b,c;if(a){this.gamepads.length=0;var d=!1;b=0;for(c=a.length;b<c;b++)typeof a[b]!=this.prevRawGamepadTypes[b]&&(d=!0,this.prevRawGamepadTypes[b]=typeof a[b]),a[b]&&this.gamepads.push(a[b]);if(d){this.buttonStates.length=0;b=this.axisValues.length=0;for(c=this.gamepads.length;b<c;b++){var a=this.gamepads[b],f=this.buttonStates[b]=[];a.buttons.forEach(function(a,b){f[b]=a},this);var e=this.axisValues[b]=[];a.axes.forEach(function(a,b){e[b]=Math.abs(a)>this.deadzone?a:0},this)}}}},
onStatusChanged:function(a){var b=this.gamepads[a],c=this.buttonStates[a];a=this.axisValues[a];var d,f,e;d=0;for(f=b.buttons.length;d<f;d++){var g=b.buttons[d],h=c[d];e="button-"+d;h!=g&&(this.isDetecting?this._detectCallback({device:"gamepad",inputId:e,isAxis:!1}):(h=g>h?"down":"up",e in this.bindings&&(e=this.bindings[e],e[h]&&(this.input[e.description]=g))),c[d]=g)}d=0;for(f=b.axes.length;d<f;d++)c=b.axes[d],Math.abs(c)<=this.deadzone&&(c=0),g="axis-"+d,this.isDetecting&&a[d]!=c?this._detectCallback({device:"gamepad",
inputId:g,isAxis:!0}):g in this.bindings&&(e=this.bindings[g],e.invert&&(c*=-1),this.input[e.description]=c),a[d]=c},destroy:function(){window.removeEventListener("MozGamepadConnected",this.connectListener,!1);window.removeEventListener("MozGamepadDisconnected",this.disconnectListener,!1)}};
